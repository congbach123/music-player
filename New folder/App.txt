  //toast config
  const [toastVisible, setToastVisible] = useState(false);
  const [toastMsg, setToastMsg] = useState({message: '', type: ''});
  const [fadeAnim, setFadeAnim] = useState(new Animated.Value(0));

  useEffect(() => {
    if (toastVisible) {
      // Fade in the toast
      Animated.timing(fadeAnim, {
        toValue: 1,
        duration: 500,
        useNativeDriver: true,
      }).start();

      const timer = setTimeout(() => {
        // Fade out the toast
        Animated.timing(fadeAnim, {
          toValue: 0,
          duration: 500,
          useNativeDriver: true,
        }).start(() => setToastVisible(false));
      }, 3000);

      return () => clearTimeout(timer);
    }
  }, [toastVisible, fadeAnim]);

  const displayToast = (msg, type) => {
    setToastMsg({message: msg, type});
    setToastVisible(true);
    setFadeAnim(new Animated.Value(0)); // Reset fadeAnim value
  };

  const getToastStyle = (type) => {
    switch (type) {
      case 'info':
        return styles.infoToast;
      case 'error':
        return styles.errorToast;
      case 'success':
        return styles.successToast;
      default:
        return {};
    }
  };

    <View>
        {toastVisible && (
          <Animated.View
            style={[
              styles.toast,
              getToastStyle(toastMsg.type),
              {opacity: fadeAnim},
            ]}>
            <Text style={styles.toastText}>{toastMsg.message}</Text>
          </Animated.View>
        )}
      </View>
